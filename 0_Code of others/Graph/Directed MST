#define MAX_VERTEX 100100
#define INF 100100000
struct Edge
{
    int u,v,w,ind;
    Edge(int u=0,int v=0,int w=0)
    {
        this->u = u;
        this->v = v;
        this->w = w;
    }     bool operator < (const Edge &b)     const
    {
        return w<b.w;
    }
};
int nV,nE;
//nV -> Number of Vertex.
vector<Edge> Edges[MAX_VERTEX]; //Adjecency List.
//Edge u->v inserted into list of v.
vector<Edge> EdgeList; //All edges. Used
//if Path or Used Edges Required.
vector<int>adj[MAX_VERTEX]; // to check the //graph connectivity.
int par[MAX_VERTEX],color[MAX_VERTEX];
int W[MAX_VERTEX],toUse[MAX_VERTEX];
bool used[MAX_VERTEX+100];
int vertexEdge[MAX_VERTEX];
vector<int>choosed;
int DMST(int nodes,int root,vector<Edge> Edges[])
{
    int i,j,t,u,v;
    Edges[root].clear();
    for(i=0; i<nodes; i++)
    {
        par[i] = i;
        sort(Edges[i].begin(),Edges[i].end());
    }
    bool cycle_found = true;
    while(cycle_found)
    {
        cycle_found = false;
        memset(color,0,sizeof color);
        color[root] = -1;
        for(i=0,t=1; i<nodes; i++,t++)
        {
            u = par[i];
            if(color[u]) continue;
            for(v=u; !color[v]; v=par[Edges[v][0].u])
            {
                color[v] = t;
                choosed.push_back(Edges[v][0].ind);
            }
            if(color[v] != t) continue;
            cycle_found = true;
            int sum = 0, supe =v;
            for( ; color[v]==t; v=par[Edges[v][0].u])
            {
                color[v]++;
                sum+= Edges[v][0].w;
            }
            for(j=0; j<nodes; j++) W[j] = INF;
            for(; color[v]==t+1; v=par[Edges[v][0].u])
            {
                color[v]--;
                for(j = 1; j<Edges[v].size(); j++)
                {
                    int w = Edges[v][j].w+sum-Edges[v][0].w;
                    if(w<W[Edges[v][j].u])
                    {
                        W[Edges[v][j].u] = w;
                        toUse[Edges[v][j].u]=Edges[v][j].ind;
                    }
                }
                par[v] = super;
            }
            Edges[super].clear();
            for(j=0; j<nodes; j++)                 if(par[j] != par[par[j]])                                       par[j] = par[par[j]];
            for(j=0; j<nodes; j++)                 if(W[j]<INF && par[j]!= super)
                {
                    Edge e = Edge(j,super,W[j]);                        //End Of DMST Function....
                    e.ind = toUse[j];
                    Edges[super].push_back(e);
                }
            sort(Edges[super].begin(),Edges[super].end());
            for(j=0; j<Edges[super].size(); j++)
            {
                Edge e=Edges[super][j];
            }
        }
    } //cout<<"In outside of Loop:"<<endl;
    int sum = 0;
    for(i=0; i<nodes; i++)         if(i!=root && par[i]==i)
        {
            sum += Edges[i][0].w;
            // i'th node's zero'th edge contains the minimum cost after DMST algo.
        }
    return sum;
}
int isPossible()
{
    int i,j,u,v;
    for(i=0; i<nV; i++)
    {
        for(j=0; j<Edges[i].size(); j++)
        {
            adj[Edges[i][j].u].push_back(Edges[i][j].v);
        }
    }
    queue<int>Q;
    Q.push(0);
    memset(color,0,sizeof color);
    color[0] = 1;
    while(!Q.empty())           //BFS to check graph Connectivity.
        u = Q.front();
    Q.pop();
    for(i=0; i<adj[u].size(); i++)
    {
        v = adj[u][i];
        if(color[v]) continue;
        color[v] = 1;
        Q.push(v);
    }
}
for(i=0; i<nV; i++) if(!color[i]) return -1;
return DMST(nV,0,Edges);
}
int main()
{
    int i,j,test,Case=1;
    Edge e;
    test = 1;
    while(test--)
    {
        scanf("%d %d",&nV,&nE);
        {
            for(i=0; i<nE; i++)
            {
                scanf("%d %d %d",&e.u,&e.v,&e.w);
                e.u--;
                e.v--;
                e.ind = i;
                Edges[e.v].push_back(e);
                EdgeList.push_back(e);
            }
            memset(used,0,sizeof used);
            int res = isPossible();
            if(res == -1) printf("-1\n");
            else
            {
                memset(used,0,sizeof used);
                memset(color,0,sizeof color);
                for(i=choosed.size()-1; i>=0; i--)
                {
                    Edge e = EdgeList[choosed[i]];
                    if(color[e.v]) continue;
                    color[e.v] = 1;
                    used[choosed[i]] = true;
                }
                printf("%d\n",res);
                if(res)
                {
                    for(i=0; i<nE; i++)if(used[i] && EdgeList[i].w)printf("%d ",i+1);
                    printf("\n");
                }
            }
        }
        return 0;
    }
