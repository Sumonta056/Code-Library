T areaTriangle(pt a,pt b,pt c){ return abs(cross(b-a,c-a))/2.0; }                   /// triangle Area

/// polygon Area
T areaPolygon(vector<pt> p) { double area = 0.0; for (int i = 0, n = p.size(); i < n; i++) { area += cross(p[i], p[(i+1)%n]); } return abs(area) / 2.0; }

/// Testing a Point P is in the polygon or not
bool above(pt a, pt p) { return p.y >= a.y; }
bool crossesRay(pt a, pt p, pt q) { return (above(a,q) - above(a,p)) * orient(a,p,q) > 0; } /// check if [PQ] crosses ray from A
bool inPolygon(vector<pt> p, pt a, bool strict = true) {                                   /// if strict, returns false when A is on the boundary
int numCrossings = 0;  for (int i = 0, n = p.size(); i < n; i++) { if (onSegment(p[i], p[(i+1)%n], a))  return !strict;  numCrossings += crossesRay(a, p[i], p[(i+1)%n]); } return numCrossings & 1;     }

/// another way Testing a point is in the polygon or not - with winding number.
/// winding number : how many closed curve surronded of a point . if 0, there is no curve. if +1 CCW curve . if (-somthing) CW curve

double AngleTravelled(pt p, pt q, pt a)                                                     /// amplitude travelled around point A, from P to Q
{ double ampli = angle(p-a, q-a); if (orient(a,p,q) > 0) return ampli; else return -ampli; }
int windingNumber(vector<pt> p, pt a) { double ampli = 0; for (int i = 0, n = p.size(); i < n; i++) ampli += AngleTravelled(a, p[i], p[(i+1)%n]); return round(ampli / (2*pi)); }

/// is point p in the triangle
T sign(pt p1, pt p2, pt p3) { return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y); }
bool PointInTriangle(pt p, pt v1, pt v2, pt v3)
{ bool b1, b2, b3; b1 = sign(p, v1, v2) < 0.0; b2 = sign(p, v2, v3) < 0.0; b3 = sign(p, v3, v1) < 0.0;
return ((b1 == b2) && (b2 == b3));
}
