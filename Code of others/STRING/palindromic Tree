const int N   = 500050;
/// given all palindrome with starting pos , ending pos, and number of occurence
///There can be at most n unique palindromes for a string of size n
struct node    ///a node is a palindromic substring of the string
{
    int nxt[26]; ///link to the palindrome which is formed by adding
    ///next[i] in both side of this palindrome
    int len; ///length of the palindrome
    int st,en; ///starting and ending index of the node
    int suflink; ///link to the maximum proper suffix palindrome of the node
    int cnt; ///stores the length of the suffix link chain from it (including this node)
     ///i.e. the number of palindromic suffix of this node
    int oc; ///stores the number of occurrence of the node
};
string s;
node nd[N];
int n; ///size of string
int sz; ///indicates size of the tree
int suf; ///index of maximum suffix palindrome
void init()
{
    sz=2,suf=2;
    nd[1].len=-1,nd[1].suflink=1; ///node 1- root with length -1
    nd[2].len=0,nd[2].suflink=1; ///node 2- root with length 0 i.e null palindrome
}
/// return if creates a new palindrome
int add_letter(int pos)
{
///find the maximum suffix of the prefix+s[pos]
    int cur=suf,curlen=0;
    int ch=s[pos]-'a';
    while(1)
    {
        curlen=nd[cur].len;
        if(pos-1-curlen>=0&&s[pos-1-curlen]==s[pos])
            break;
        cur=nd[cur].suflink;
    }
///if the node is not created yet then create the new node
    if(nd[cur].nxt[ch])
    {
        suf=nd[cur].nxt[ch];
        nd[suf].oc++;
        return 0;
    }
    sz++;
    suf=sz;
    nd[sz].oc=1;
    nd[sz].len=nd[cur].len+2;
    nd[cur].nxt[ch]=sz;
    nd[sz].en=pos;
    nd[sz].st=pos-nd[sz].len+1;
    if(nd[sz].len==1)
    {
        nd[sz].suflink=2;
        nd[sz].cnt=1;
        return 1;
    }
    while(1)
    {
        cur=nd[cur].suflink;
        curlen=nd[cur].len;
        if(pos-1-curlen>=0&&s[pos-1-curlen]==s[pos])
        {
            nd[sz].suflink=nd[cur].nxt[ch];
            break;
        }
    }
    nd[sz].cnt=1+nd[nd[sz].suflink].cnt;
    return 1;
}
/*
For kth palindrome lexographically..
take a hash of string s
take all start,end,occurence in a vector and call sort(v.begin(),v.end(),cmp)
make a compare function with logn by hashing with binary search
*/
/*
bool comp(pair<pii,int> a, pair<pii,int>b)
{
    int x=a.fi.sc-a.fi.fi+1;
    int y=b.fi.sc-b.fi.fi+1;
    int l=0,r=(int)min(x,y)-1,ans=-1,mid;
    while(l<=r)
    {
        mid=(l+r)/2;
        pii xx=h.get_hash(a.fi.fi+1,mid+a.fi.fi+1);
        pii yy=h.get_hash(b.fi.fi+1,mid+b.fi.fi+1);
        if(xx.fi==yy.fi)
        {
            ans=max(ans,mid);
            l=mid+1;
        }
        else{
            r=mid-1;
        }
    }
    if(ans==(int)min(x,y)-1)
    {
        if(x<y) return true;
        else return false;
    }
      if(s[a.fi.fi+ans+1]<s[b.fi.fi+ans+1])
            {
                return true;
            }
            return false;
}
*/
int main()
{
    __;
    int k,n,m;
    ll ans=0;  ///number of palindromic substrings of a string (not unique palindrome)
    cin>>s;
    n=s.size();
    init();
    for(int i=0; i<n; i++)
    {
        add_letter(i);
        ans+=1LL*nd[suf].cnt;
    }
  cout<<ans<<endl;
    for(int i=sz; i>=3; i--)
        nd[nd[i].suflink].oc+=nd[i].oc;
    for(int i=3; i<=sz; i++)
        cout<<nd[i].st<<' '<<nd[i].en<<' '<<nd[i].oc<<endl;
///for multiple input clear all the (0..sz) nodes nxt array
    return 0;
}

