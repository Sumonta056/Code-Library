 when we need to query anything in a subtree
 -> how many different colour  in this subtree
->  subtree sum
- > subtree unique colour sum
-> subtree characters can  make palindrome?
 -> subtree hight query(gcd,xor,and,or)
-> nlogn complexity
ll ans[N],arr[N],big[N],level[N],sz[N],cnt[N],flg[N];
char str[N];
vi g[N];
void dfs(int u,int pre)
{
/// level will need when query in a hight
    if(pre==-1) level[u]=1;
    else
    {
        level[u]=level[pre]+1;
    }
    for(auto v : g[u])
    {
        if(v!=pre)
        {
            dfs(v,u);
            sz[u]+=sz[v];
        }
    }
    sz[u]++;
}
ll sum=0;
void add(int u,int pre,int val)
{
/// query answering part
/// if query is about hight then we need to compute answer with level
    flg[arr[u-1]]+=val;
    if(flg[arr[u-1]]==1 && val==1)
    {
        sum+=arr[u-1];
    }
    else if(flg[arr[u-1]]==0)
    {
        sum-=arr[u-1];
    }
     for(auto v : g[u])
    {
        if(v!=pre && big[v]!=1)
        {
            add(v,u,val);
        }
    }
}
void dsu(int u,int pre,bool flag){

        int mx=-1,bigchild=-1;
        for(auto v : g[u])
        {
            if(sz[v]>mx && v!=pre)
            {
                mx=sz[v];
                bigchild=v;
            }
        }
        for(auto v : g[u])
        {
            if(v!=pre && v!=bigchild)
            {
                dsu(v,u,0);

            }
        }
        if(bigchild!=-1)
        {
            dsu(bigchild,u,1);
            big[bigchild]=1;
        }
        add(u,pre,1);
/// query part
/// here we can query offline
        ans[u]=sum;
        if(bigchild!=-1) big[bigchild] =0;
        if(flag==0)
        {
/// clearing part
            add(u,pre,-1);
        }

}
