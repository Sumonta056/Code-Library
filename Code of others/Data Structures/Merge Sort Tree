/// giving sum l to r which value up to k
/// no update
const int N   = 100050;
const ll inf  = 2e18;

ll dp[N],arr[N];
char str[N];
vil t[4*N],cu[4*N];
ll a[N];
void build(int n,int b,int e)
{
    if(b==e)
    {
        t[n].pb(a[b]);
        cu[n].pb(0);
        cu[n].pb(a[b]);
        return;
    }
    int mid=(b+e)/2;
    int l=n*2;
    int r=l+1;
    build(l,b,mid);
    build(r,mid+1,e);
    vector<ll>g(e-b+1);
    merge(t[l].begin(),t[l].end(),t[r].begin(),t[r].end(),g.begin());
    t[n]=g;
    cu[n].pb(0);
    for(int i=0;i<t[n].size();i++)
    {
        cu[n].pb((cu[n][i]+t[n][i]));
    }
}
ll query(int n,int b,int e,int i,int j,ll k)
{
    if(b>j||e<i)
        return 0;
    if(b>=i&&e<=j)
    {
        ll sum=cu[n][cu[n].size()-1];
        if(lower_bound(t[n].begin(),t[n].end(),k)==t[n].end()) return 0;
        int pos=(lower_bound(t[n].begin(),t[n].end(),k)-t[n].begin());
        if(pos==0) return sum;
        return (sum-cu[n][pos]);
    }
    int mid=(b+e)/2;
    int l=n*2;
    int r=l+1;
    return query(l,b,mid,i,j,k)+query(r,mid+1,e,i,j,k);
}
