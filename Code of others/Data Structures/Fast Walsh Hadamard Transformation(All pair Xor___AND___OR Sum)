/// All pair Xor___AND___OR Sum

#define MX (1 << 16)
#define OR 0
#define AND 1
#define XOR 2
int in=qpow(2,mod-2);
/// Fast Walsh-Hadamard Transformation in n log n
///Beware!!! after the convolution the arrays will not be the same
again
///array sizes must be same and powers of 2
struct fwht{
 int P1[MX], P2[MX];
 void walsh_transform(int* ar, int n, int flag = AND){
 if (n == 0) return;
 int i, m = n/2;
 walsh_transform(ar, m, flag);
 walsh_transform(ar+m, m, flag);
  for (i = 0; i < m; i++){ /// Don't forget to remove modulo if not
required
 int x = ar[i], y = ar[i + m];
 if (flag == OR) ar[i] = x, ar[i + m] = (x + y)%mod;
 if (flag == AND) ar[i] = (x + y)%mod, ar[i + m] = y;
 if (flag == XOR) ar[i] = (x + y)%mod, ar[i + m] = (x -
y+mod)%mod;
 }
 }
 void inverse_walsh_transform(int* ar, int n, int flag = AND){
 if (n == 0) return;
 int i, m = n/2;
 inverse_walsh_transform(ar, m, flag);
 inverse_walsh_transform(ar+m, m, flag);
 for (i = 0; i < m; i++){ /// Don't forget to remove modulo if not required
 int x = ar[i], y = ar[i + m];
 if (flag == OR) ar[i] = x, ar[i + m] = (y - x+mod)%mod;
 if (flag == AND) ar[i] = (x - y+mod)%mod, ar[i + m] = y;
 if (flag == XOR) ar[i] = 1LL*(x + y)%mod *in%mod, ar[i + m] = 1LL*(x - y+mod)%mod *in%mod; /// replace modular inverse(in) by>>1 if not required
 }
 }
 /// For i = 0 to n - 1, j = 0 to n - 1
 /// v[i flag j] += A[i] * B[j]
 vi convolution(int n, int* A, int* B, int flag = AND){
 assert(__builtin_popcount(n) == 1); /// n must be a power of 2
 for (int i = 0; i < n; i++) P1[i] = A[i];
 for (int i = 0; i < n; i++) P2[i] = B[i];
 walsh_transform(P1, n, flag);
 walsh_transform(P2, n, flag);
 for (int i = 0; i < n; i++) P1[i] = 1LL*P1[i] * P2[i]%mod;
 inverse_walsh_transform(P1, n, flag);
 return vi(P1,P1+n);
 }
 ///compute A^k where A*A=A convolution A
 vi pow(int n,int* A,ll k,int flag=AND)
 {
 walsh_transform(A,n,flag);
 for(int i=0;i<n;i++) A[i]=qpow(A[i],k);
 inverse_walsh_transform(A,n,flag);
 return vi(A,A+n);
 }
}t;
int a[MX];
int32_t main()
{
 __;
 int i,j,k,n,m;
 cin>>n>>k;
  for(i=0;i<=k;i++) a[i]=1;
 vi v=t.pow(MX,a,n,XOR);
 ///Beware!!! the array a will not be the same again
 int ans=0;
 for(i=1;i<MX;i++) ans=(ans+v[i])%mod;
 cout<<ans<<nl;
 return 0;
}